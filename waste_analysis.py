# -*- coding: utf-8 -*-
"""Waste Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ek8Y4xKx_flktEA62RpYAJr5cWCP_R7H

Core Equations for Waste Analysis of Thailand

A. Waste Generation Prediction (Linear Regression)
"""

import pandas as pd
import statsmodels.api as sm
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier, export_text
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

import os
import pandas as pd

# Build the absolute path to the CSV file based on the script's location
script_dir = os.path.dirname(os.path.abspath(__file__))
csv_path = os.path.join(script_dir, 'SW_Thailand_2021_Labeled.csv')

print("Looking for file at:", csv_path)

# Read the CSV file from the correct path
df = pd.read_csv(csv_path)


X = df[['Pop_Density', 'GPP_Services(%)', 'No_Households']]
y = df['MSW_GenRate(ton/d)']

X = sm.add_constant(X)
model = sm.OLS(y, X).fit()
print(model.summary())

"""B. Food Waste Proportion (Logistic Regression)"""

df['High_Food_Waste'] = (df['Food_Waste'] >df['Food_Waste'].median()).astype(int)

X = df[['GPP_Agriculture(%)', 'GPP_Services(%)', 'Age_0_5']]
y = df['High_Food_Waste']

model = LogisticRegression()
model.fit(X,y)

df['Food_Waste_Prediction'] = model.predict_proba(X)[:, 1]

print(model.coef_)
print(model.intercept_)
print(model.score(X,y))
print (model.predict_proba(X))
print(model.predict(X))

"""2. Cluster Classification"""

X = df[['GPP_Industrial(%)', 'GPP_Agriculture(%)', 'GPP_Services(%)', 'Pop_Density', 'Visitors(ppl)']]
y = df['Cluster_Label']

model = DecisionTreeClassifier()
model.fit(X,y)

text_representation = export_text(model, feature_names = list(X.columns))
print(text_representation)
print(export_text(model, feature_names = list(X.columns)))

"""3. Improper Disposal Risk Index"""

df['Risk_Score'] = 0.4* (df['MSW_ImproperDisposed']/df['MSW_GenRate(ton/d)']) + 0.6* (1-df['GPP_Services(%)']/100)

df['Risk_Score'] = (df['Risk_Score'] - df['Risk_Score'].min()) / (df['Risk_Score'].max() - df['Risk_Score'].min())

print(df['Risk_Score'])

"""4. Model Validation and Deployment"""

df = pd.read_csv(csv_path)
X = df[['Pop_Density', 'GPP_Services(%)', 'No_Households']]
y = df['MSW_GenRate(ton/d)']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train = sm.add_constant(X_train)
X_test = sm.add_constant(X_test)
model = sm.OLS(y_train, X_train).fit()
print(model.summary())

"""B. Streamlit Dashboard"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression

# Cache data loading
@st.cache_data
def load_data():
    try:
        df = pd.read_csv(csv_path)

        # Verify required columns exist
        required_cols = ['Food_Waste', 'GPP_Agriculture(%)', 'GPP_Services(%)', 'Age_0_5']
        if not all(col in df.columns for col in required_cols):
            missing = [col for col in required_cols if col not in df.columns]
            st.error(f"Missing required columns: {missing}")
            return None

        # Create target variable
        df['High_Food_Waste'] = (df['Food_Waste'] > df['Food_Waste'].median()).astype(int)
        return df

    except Exception as e:
        st.error(f"Error loading data: {str(e)}")
        return None

# Load data
df = load_data()
if df is None:
    st.stop()

# Cache model training
@st.cache_resource
def train_model():
    try:
        X = df[['GPP_Agriculture(%)', 'GPP_Services(%)', 'Age_0_5']]
        y = df['High_Food_Waste']
        model = LogisticRegression(max_iter=1000)
        model.fit(X, y)
        return model
    except Exception as e:
        st.error(f"Model training failed: {str(e)}")
        return None

model = train_model()
if model is None:
    st.stop()

# Streamlit UI
st.title("ðŸ‡¹ðŸ‡­ Thailand Food Waste Predictor")
st.write("Predicts high food waste risk based on economic and demographic factors")

with st.form("prediction_form"):
    st.header("Economic & Demographic Indicators")

    col1, col2, col3 = st.columns(3)

    with col1:
        gdp_agri = st.slider(
            "Agriculture GDP Share (%)",
            min_value=float(df['GPP_Agriculture(%)'].min()),
            max_value=float(df['GPP_Agriculture(%)'].max()),
            value=float(df['GPP_Agriculture(%)'].median()),
            step=0.1,
            help="Percentage of GDP from agriculture sector"
        )

    with col2:
        gdp_services = st.slider(
            "Services GDP Share (%)",
            min_value=float(df['GPP_Services(%)'].min()),
            max_value=float(df['GPP_Services(%)'].max()),
            value=float(df['GPP_Services(%)'].median()),
            step=0.1,
            help="Percentage of GDP from services sector"
        )

    with col3:
        age_0_5 = st.slider(
            "Population Age 0-5 (%)",
            min_value=float(df['Age_0_5'].min()),
            max_value=float(df['Age_0_5'].max()),
            value=float(df['Age_0_5'].median()),
            step=0.1,
            help="Percentage of population aged 0-5 years"
        )

    submitted = st.form_submit_button("Predict Food Waste Risk")

    if submitted:
        try:
            # Prepare input with correct feature order
            input_data = pd.DataFrame([[gdp_agri, gdp_services, age_0_5]],
                                    columns=['GPP_Agriculture(%)', 'GPP_Services(%)', 'Age_0_5'])

            # Get prediction
            prediction = model.predict(input_data)[0]
            proba = model.predict_proba(input_data)[0][1]

            # Display results
            st.success("### Prediction Results")

            if prediction == 1:
                st.error(f"ðŸš¨ High Risk of Food Waste ({proba:.1%} probability)")
            else:
                st.success(f"âœ… Low Risk of Food Waste ({1-proba:.1%} probability)")

            # Show model details
            with st.expander("Model Details"):
                st.write("**Model Coefficients:**")
                coef_df = pd.DataFrame({
                    'Feature': model.feature_names_in_,
                    'Coefficient': model.coef_[0]
                })
                st.dataframe(coef_df.style.format({'Coefficient': '{:.4f}'}))

                st.write(f"**Model Accuracy:** {model.score(df[['GPP_Agriculture(%)', 'GPP_Services(%)', 'Age_0_5']], df['High_Food_Waste']):.1%}")
                st.write(f"**Intercept:** {model.intercept_[0]:.4f}")

        except Exception as e:
            st.error(f"Prediction failed: {str(e)}")

# Add data summary
with st.expander("Data Summary"):
    st.write(f"Total provinces: {len(df)}")
    st.write(f"High food waste provinces: {df['High_Food_Waste'].sum()} ({df['High_Food_Waste'].mean():.1%})")
    st.dataframe(df.describe())